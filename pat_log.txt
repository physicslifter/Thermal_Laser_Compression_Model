===================================================================================
6/20/21
Next to-do: change filepaths in the document accordingly
    - 2 choices to do this:
            - write function for getting the relative filepath and plugging it in (preferably in Python)
            - write in the filenames, then manually change them as the file structure changes

    - for now, we can just manually change the filenames so that they work with the new paths. If this turns out to be an issue going forward, we can just write something quick in python to take care of this

Let's think out what we want to do...
    - We want the .m function, RunFEM.m to run with the input parameter file
    - Can start this by working in MATLAB to get it to run in the current file location
        - RunFEM takes only the input parameter file, which has the filenames, so it seems obvious that editing paths in this document would allow everything to run smoothly

    - changing the default input parameter file...

I previously tried to stop the times from printing in the transientBCHeatedBlock_square.m file. This seems to have caused some issues because now when I try to run the file, it won't run. Troubleshooting below:  
    - Going back in to uncomment the line
    - uncommenting
    - now that I think about it, I'm pretty sure MATLAB only prints the stuff if you don't put a semicolon on the end. 
        - adding semicolon...

    - and it works

    - next problem: filename concat not working
        - forgot to send the name as a second argument
        - okay now it runs

    - Okay now it runs. Have to get it to stop printing out that graph

    Getting the graph to stop printing...
        - commenting out the plot lione (28) in RunFEM.m
        - And it works!

    
Okay, now I've got the times to stop printing, and the graph stopped from being output. 

Now it's time to go on to getting the function to run from the cmd line in the python-matlab engine.

    - Running from the command line:
        - not working
        - using 2 arguments
        - okay now the cmd line is working


git status is now showing all parent folders as untracked files when I run git status. Now I have to figure this out before moving on, since I don't want to add all of these to the repo, since they are unrelated.

To-do:
    - *DONE* figure out git problem (ignore, or not add untracked files or directories)
    - change file mapping JSON to account for the fact that this is not on my computer. Everything should be a relative path, or nothing at all.
        *DONE*delete my computer's filepath from the JSON
    - *DONE*write python file, so that we can run it easily from the command line
    - *DONE*Add the 1-D version of the problem that Tyler sent me to the Github
    - edit the github files so that everything can run properly on any machine
    - Figure out how to get the function file to talk to the main script in MATLAB

Figuring out git problem...
it was because I was still in the other directory, testing to make sure the files worked. Going back into the directory...

- leaving the JSON file mapping problem for a bit and focusing on getting the python to work.

Getting Python file to run from the command line...
Picking up where I left off last week, there should be a test file with the special name "cmd_line_test" that I ran last week from the command line.
- Now I remember where I got stuck yesterday - on the problem where there are "too many output arguments" This is why I was trying to get the code to run in MATLAB yesterday, and why I was trying to get it to the point where there is no output. Back to the MATLAB file to see if there is any output when we run it.
    - Running the FEM with the run name "output_check1"
    - checking output file...
    - There it is, and there are no outputs associated with it.
    
- So MATLAB is to the point where there are no outputs, the function simply saves a file. There is still the problem with having the call the 2d transientBCHeatedBlock_square function, but we can leave this for now and see if it leads to any complications. For now we have to go back to the python cli and see if we are still encountering the same difficulties there
    - running the function in python through the python engine for matlab...
        - This didn't seem to fix our problem. I have to figure out what to do with the engine to get it to run
        - I may have just stumbled on it! - might have to do nargout=0, this seems to ring a bell
            - this works! saved as cmd_line_test3

Finally, the next step: putting all of this inside of a python script that will run automatically.

- Putting it into a python script...
    - this should be straightforward, I'm going to start out with just putting my lines into the command prompt into a line of code.

    -I've now got a function defined in a python script, I now need to remember/figure out how to run that function from the command line.
    - I wrote a second function that takes a simple input to run fro the file as a test
    - working on importing a function in python in the command prompt...
    - Okay I got it to work, the problem was that I was importing the matlab engine inside of the function.

- Adding new python stuff to the repository
    - I've made all of these changes in the local file, where I know everything works smoothly. I have not gotten the github to run cohesively yet. The final step to getting to do this is adding the new files to the repo  
        - run_model.py has been added to the repository

- Now for the task of getting the code to work ...
    - I'll start with just trying to get the code/functions to work in the MATLAB file


Today I need to pick up where I left off and work on getting the code to where it can function on any machine.

Getting the code to work...
    - 

    -----
    ----
    ---
    --
    -

===========================
Future tasks:
	- get python code in working structure of classes and functions
	
---------------------------
Picking up where I left off yesterday...

trying to get the code to function on any machine
	- okay, let's go see how to run the fucntion currently, it should be in the folder WicksLabWork
	- have to make sure I'm in the right repo, because earlier commands are coming back from a different repo
	- nvm, I'm good, I just have to be inside of the Thermal_Laser_Compression_Model folder
	- checking the inputs required
		- same as the matlab function, but we have to call the function from this file

	- writing a quick script to prove that this does indeed work
		-troubleshooting the script...
			- trying from the cmd line
			ahh import error
		- there's something wrong with how I've coded these functions, I think I might have to import the matlab file at the top of the file where I define the functions

	- Before I could get the function to run from the command prompt, but it is really important to make sure that I can run the function in Python

Whatever, I just threw the function in, I can figure everything out later

Okay now I should be good to move the files over to the Thermal_Laser_Compression_Model, and then start working from there to get everything working cohesively in github

- Getting the code to work
	- transferring the new files from WicksLabWork
		- prove_working.py is the only real file to move for now.
	- check filepaths in the default mat file to see that they are correct for the current file setup
	- have been troubleshooting for a bit now, I think the next step is to go into MATLAB and try to solve it from that end of things
-
--
---
----
-----

=================================================================================
=========================================================================

Troubleshooting the code in Matlab...

    - running function in WicksLabWork folder...
        - okay it works here, but not in the other folder
    - okay let's go through and find all of the points where there is some external code referenced (next step is to go look at the setup of the file structure)
    - Figured it out! the problem was that there was no variable t, and now I see it is because I had commented it out. I must have copied over the file while I was troubleshooting the problem that I was having with the fuunction with the transient heated block. 
        - I uncommented the line, and added the new solution, which is a semicolon at the end of the line. I forgot Matlabs syntax, and that to remove the colon at the end of the line is to print the output haha
            - output saved as test 11


Proving you can run the repository functionally...
    - when I go to the repo, open python, and try to just import the function like: from prove_working import fem_run, it actually runs the file prove_working.py   
        - I tried this because yesterday when trying to import the function from thje function file, it wouldn't work, and also trying to run the prove_working.py file did not work'

    - Now I'm trying commenting out everything other than the actual function itself and seeing if this still works
        - it imports fine...
        - my test run (output saved as pat1) worked just fine
    - While I wait for the py code to run, let's go check matlab to see how the 1-D function differs from the 2d (if at all)
        - most effecient way seems to be to just try to run the function with 1d and see what happens. will try in matlab
            - have to copy it into the subfolder first
            - failure because some other function is mentioned
            - leave for now, I have more worthwhile things to work on


Okay next up...
    - we need to be able to write an input matrix in python. Something that takes input variables, then writes a matlab matrix, then calls that matlab matrix in the fem_run function.
        - go to the writing a default matrix file in python and 
    - On flip side, we also have to figure out how to assess our data
        - check notes from last time to see how Tyler wants to assess
        - have to change the naming technique in matlab to be more general
            - just saves as the run name now
        - now we have to run the model, then go grab the matrix from the model and assess the data
            - for this, we need to do read in the .mat matrix that it saves as, as a python matrix, or a numpy array, pandas, dataset, etc.
                ideally, our python function would do this

        have the data, now we have to figure out which variable in the file is actually the output data

===================================================
===================================================
Notes on 6/28/2021
--
To-Do's:
    - get python code to the point where I can write in variables to an input file
    - write Matlab function to create a function with some specified parameters, then call an instance of that function before the lines where the transientBCheatedblock function is called
    - sync files to github
    - set up Zoom meeting with Tyler for today
    - set up recurring meetings for us on Mondays at 10am
--------------------------------------------
Notes:
    - creating the macro transientBCheatedblock function...
        - let's think about what we really need here... what do we really need to make the Matlab code execute exactly as it does now, while still being able to manipulate variable(s) between the function file and the MATLAB script
            - first off, it has to be stored in a separate file, but one that is in the same folder.
                - we could do this by creating the file, putting it in the current directory, then later calling it when we call the transientBCHeatedBlock function in our code. Finally, we would have to delete the file from the directory, so that there are not endless files stored in the folder
            - So, the steps to go throughh in the file in order are:
                1. create a function for the boundary conditions with the specified parameter(s)
                2. write the created function to its own file
                [CURRENTLY IN CODE]3. Call the function/file in the code
                4. Delete the created function file from the directory
            - Before we can actually do the previous, we need to:
                1. include the variable in the python file to create the default input matrix
                2. Call the variable in the matlab file when reading in the .mat matrix file

        - Changing the python script to include peak_temp as an additional paramter...
        - running the script to generate a new .mat input variable matrix
        - Now I have to edit the function in Matlab so that it also takes the peak_temp variable
        - Now it's time for writing the function in MATLAB...
            - first looking @ how to write a function in MATLAB
            - I don't think it will work, but I will try to start by just writing a function that creates another function and then saves it

        - New idea for how to get it to work:
            1. save .mat file with the peak_temp value
            2. Call a python script that:
                1. Reads the .mat to get the peak_temp value 
                2. writes a function to a file, with specified peak_temp parameter
                3. in Run_FEM, we can call the function, which is saved in accordance with the peak_temp value
                    - if we always save the function in the same place, and only rewrite it when we have a new peak temp, we dont have to worry about writing a function, we need only to write a script
            - Looking at how to write a .mat file in python...
            - Okay, the .mat file has been written, now it's time to write a new boundary condition function, where peak_temp automatically reads to the file
                - just demonstrated that the variable can be written in python, then moved into matlab

            - Now I've updated the function in matlab, we now need a python function that does the following:
                1. writes user inputs to matlab file
                    - wow, hold on, we can just read the variable from the original variable file, the default input matrix
                        - rewriting matlab file again...
                        - and checking to make sure it works...
                            - Good & Good!

                    - small problem in MATLAB - it's still printing the plots, we don't really need to fix those though at the moment
                2.We want to be able to do some function like:
                FEM(parameter_dict), which will then return a nx3 numpy array with n # of time points, and time, real temp & model temp, along with an np array of the parameters, or we can just throw the two into a larger array that is divided up into 2 subarrays

                    - let's just do FEM(parameter numpy array), so that all inputs and outputs of the function are a numpy array
                        - just wrote an np-to-mat function to use at the beginning of the code, so that we send in info as an numpy array
                - writing down desired flow in notebook...
                - FEM output is saved in .mat files, so now we need a way to read .mat files into python, and manipulate them to get what we want as numpy arrays

        Have to go back and define the input parameters in it's own file...

=============================================================================================
=============================================================================================

Tasks for today:
    - finish the code framework in Python for iterating the model with differing parameters
    - figure out what's wrong with the matlab file (returning a flat temperature profile giving the 20K data)

--
Notes:
    - Working on getting the model to work properly 
        - staret with Tyler's code file that he sent me and see if that code outputs the desired results
        - going into the code...

- okay stop with the code, I'm not sure what I need to do to get it working, and it seems obvious that the most practical way to continue is to focus on getting the wrapper complete so that we can iterate through parameter space

Working on the wrapper...
    - let's refresh ourselves on where we are...
        - Let's go see if I was running the original file that Tyler sent me, or if it is the edited one that I am working with 
            - okay well it appears that the file will not complete running because it is trying to plot against the array t_data, though this variable does not exist.
                - looking for t_data in the other code file

    - have to pick up where I left off...
        - I think I remember looking for the t_data variable, and then it turns out that this was from the transientBCheatedblock file
        - let's go back and run the file that's in the main folder of the git repository first
            - after running, we can assess what works and what doesn't, and then try to work from there 
        - Running the file  
            - problem with the .xlsx file that the matlab code points to    
                - incorrect path
            - fixed the path problem, now trying again...
                - still getting the error with the filepath
                    - how to troubleshoot this?
                - ahh, still a different name for the filepath
                    - fixed again, trying again
                    
            - new problem: errors with reading in the data from the excel files 
                - probably something to do with the column headers
                    - troubleshooting...
                    - could I just write a python function for this?
                        - maybe it:
                            - takes filepath as input
                            - goes to the file and opens the excel file
                            - gets the filenames, and changes them to a convention that works well in matlab

                    - python function probably too much work for now, I will see where else I can troubleshoot this in order to get it to work
                        - seems like I can just play around with the variable names in matlab until I can get this to work
                            - changing the capital U to lowercase (Um ==> um) does the transientBCheatedblock
                                - changing for all 3...

                        - running again...
                            - And it works!! It doesn't just return static values like the function was doing.

                    TIme to take a second and add all of the changes to the repo
                    - had to exit out of the file to commit all of the changes in the repo (since it includes changes to the log)

                    - okay so the matlab file workssssssssss

        - file returning the correct output, so now we have 2 choices for where to go from here 
            1. build new function from scratch, checking at each step to ensure that the inputs will function properly
            2. compare function to the properly working code

            - before I decide what to do, I want to run the script file in the python folder    
                - running the file...
                    - not present in the python_wrapper file
                    - where to go from here? ......................

            - let's try to compare the two first
                - from the meeting with tyler last week, I don't think that the issue was in the trnasientBCheatedsquare function, so I'll start by just looking at the runFEM function
                - appears to be the same through the first file (fitting_data_73ref)
                - onto the script that outputs the FEM fit (heat_equation_2d_square.m)
                    - fitting file ends w the lines:
                        figure
                        plot(t_data,temp1_corrected,'o',t_data,init_fit,'-')
                        legend('data','fit')

                        - these lines are commented out in the RunFEM file
                         variables d,c,t0 &w, etc are defined next, time to check if these are all defined in the input file
                            - yes all there
                    - fuck it, let's run the function, and see what the output is
                    - times are printing as they are supposed to
                    Not working
                        time to try building this from scratch
                        we will have another file, run_FEM2
                    
    BUILDING run_FEM2()
        - goal
            - build model that simply loads an input file, with a static name
                - fits in with broader scheme and plan for what to do in python
                    - what to do in python:
                        - create function that:
                            - takes parameters as input
                            - writes the parameters to the default .mat file
                            - runs the FEM function
                            - return data 
            -
        Step 1 - adding in the fitting_data file to the top of the fem_run script
            - built the runFEM2 file, now time to put the reading in at the top (fitting_data_73ref.m)
            - have to change filepath, since we're now in the python_wrapper folder
            - running the file...
                - notes on output:
                    - it works and returns what it should.
            
            - DONE

        Step 2 - checking if transientBCHeatedBlock_square still works, when using the default input matrix as input
            - changed peak=28000 to peak=peak_temp
            - running the file...
                - notes on the run...
                    forgot to clear variables...
                    cleared now running again...
                    notes:
                        - good to go!

            DONE

        Step 3 - changing script file so that it reads input parameters from the default .mat file
            - look at file and same time, and comment out inputs    
            - look for values that Tyler gave me that are the important parameters for the model
                - can't find where I wrote that, just read in everything
                - running with the .mat file read at the toop, and anything that could be a variable cancelled out  
                    - error: need to write file name/path to a variable input_parameter_file
                    running file...
                        - notes on run...
                            - And it works!

            DONE
        
        Step 4 - save it to a default output file
            pasted in the code and saved it to "run_output.mat" in the fgem_OUTPUT folder
            - running the code...
                - problem with saving - have to write the variables 
                - fixed now running again...
                    it ran, time to check to make sure it worked well
                        - values:
                            works
                        runs and saves well!

            DONE

        Now for writing the python script that goes around this...
            Steps for the run in python:
                1. write to input file
                2. run the runFEM2 file
                3. read in output .mat 
                4. return the output data

            - writing to input file
            - good to go

            - installing matplotlib, so that we can check out the data
            
            got stuff working from the command line, time to put a plot together

=====================================================================

- getting the code to run with all of the variables that we were talking about yesterday
    - variables to add:
        - start_time 
        - a (in k=a*x+b)
        - b (in k=a*x+b)
    - first task: add the variables to the python file
        - done
        - done 
        - done 
    - second task: add variables to the matlab file
        - finished
    - third task: add variables to the python file (run)

Next task - get the python wrapper working for the 1D model to see how fast we can run updates.
    - let's look at the 1d model and compare to the 2d model to see what we have to do
     - I think I edited the file a bit thinking it was the 2d file, getting the original...
     - okay I think I need to write the equivalent of the transientBCHeatedBlock function, this time for 1d
        - time to go into this function to see if there are any key elements that would have to change for the change from a 1d to 2d scenario
        - reading the 2d equation, I don't see any reason why we can't just run the same function with the 1d version. trying this now...
            - I think I'm pointing to the wrong input matrix file...
                - in opening the python function, we can see that we should poiint to "input_matrix.mat"
                    - And it works
            - now trying to run the file again...
                -keep getting errors, I think I have to read in the data first
            - reading in the data makes it work better, now getting different errors
                - stupid thing where it shows a blank line is an "invalid character" idk why it does this in MATLAB sometimes
                - 1D works! And boy is it fast!,
    - boom boom boom okay now I have to write the variables into the MATLAB equation, and write a runFEM1.py function for the 1D FEM model
        - also we have to change the filenames to matrices for the one dimensional model
            - write all in to do cmd_line_test

    1-D python wrapper to-do list:
        1. merge reading in the file with the new function 
        2. add create_default_mat file for the 1d case
            - have to write list of variables that we need to write to
        3. edit 1D MATLAB function to write to unique save file names, and to read from a unique input file name
        4. write python function file for the 1-D case: runFEM1.py

    - Merging data reading with new function
        - completed as file runFEM1.m

    -  script for creating a default .mat file in python
        -wrote script, testing now
        - opkay the test worked, on to the next step

    - rewriting the matlab script and associated function to read in the variables from the file, and to function properly as they do without reading in the variable file
        - in the main script...
            - just the inputs for k, I forgot we can leave the file paths out of it for now
            - rewritten, now time to test
                - good to go, it runs
        - in the boundary condition function...
            - peak_temp
            - diffusivity
            - time_shift

        - all the inputds were rewitten, now time to do thje output file
            forgot to save to uniqe filename, redoing...



    Next step is to write the python functions for running the equation
        - this should be pretty easy enough with copying over the 2D version of the code
            -DONE 

        - and automating a dcript to prove this works
            -DONE
    
Now for the optimization part...

First: the code takes 4 minutes still to run. While running the code, it seems obvious that this is due to having to read in the new variables every time, because it was so much faster before having to read in the variables, and the times print at a much slower rate, indicating that a significant portion of the slowdown is due to something in the boundary condition function
    - could try: writing and saving the boundary condition file in python at the beginning of the loop, before running the main runFEM file
        - look up: how to edit a matlab file in python
            - still might work, but the tutorial I found only provided a way to manually edit the code, we need to automate this

        - new strategy options: 
            1. use python to write a new file every time before running
            2. use matlab to write a (function-writing function)
            
        Strategy 1 - using python to write to a new file every time 
            - looking up how to edit a matlab file in python
                - can edit a read in file in python easily using .readlines() after opening the file
                    - but can we read in a .m file?
                        - yup, it works
                - okay reading in seems to work well, now how about editing?
                    - manipulating...
                        - I think I can edit, left off here, so will have to restart here
                        - pausing quickly to upload current version to repo...
                            - good to go
                    - okay back to the manipulating, can I edit and manipulate a .m file in python, then save it and run it?
                    - huh, I can't seem to be able to get it to work as I did before, (from the command line), I wonder what are the reasons for this
                          - trying to get the file editing to work from the cmd line
                            - still working on this, I'm not totally sure that this will work
                            - need backup plan in case this doesn't work (function-writing function)

                            - following tutorial from the web for how to convert .txt to .csv 
                                idea here is that once this is possible, I should be able to convert .txt to .m. Then edit as .txt, save as .m, then run as .mat

                                pausing to check slack

                                gtg, noe back to the code tutorial

                        - writing some test code in the .txt file
                            - need some code that will print something so that we know it's working
                    

                        - the csv works, and saves as a .csv file
                            - but it uses a pandas method to_csv
                                - time to see if there is another way to do this...
                                - online there's that one article that shows we can just do this programatically from the command line
                                    - now the problem becomes how to run command line functions/commands from python
                                        - apparently this is possible via the os module, linke here: https://datatofish.com/command-prompt-python/

                                        cmd /k for running a command and keeping the cmd window open
                                        cmd /c run a command and close the window upon execution

                                        - okay now I can successfully run command lines from python. 
                                            - time to go back to the website talking about changing .txt files to .m files & see what I have to do

                                            going back to the website...
                                                - according to the site, I can run the command: "!ren *.txt *.m" from the windows command line, and this should convert all .txt files to .m files (that can run). From the matlab forum: https://www.mathworks.com/matlabcentral/answers/320137-how-to-change-txt-format-automatically-into-m-format

                                                
                                            - okay back to running command line functions/commands from inside of python
                                                - okay it seems I have he hang of it
                                                - check directory to make sure we're in the right place to change the files
                                                - everything looks good, let's try running the command
                                                    - returns error: '!ren' is not recognized as an internal or external command,

                                                - it seems that the problem is throwing because the operation is not installed on the system
                                                    - it works if we do ren instead of !ren
                                                    - now trying running the file in python

                                                    Boom! Good to go! sample1.txt has been converted to a .m file and now runs!

            - okay I now know how to convert a .txt file to a .m file and in a way such that it will run
            - task 1 - writing a python script that generates a .txt file with the same format as we have in the matlab boundary condition file
                - first off- can we switch back to .txt (if so, it's not necessary to write to a new file each time)
                    - yes, okay we can flip right back & change to a .txt file
                - next task: figuring out how to edit the .txt file
                    - copy in 1d boudary condition file
                    - now let's see if we can write a script that opens it and changes the values of the parameters, then changes it back to a .m

                    - have written the lines that work in command prompt. time to write a script that does this for me



            - task 2 - writing a python function that:
                1. changes boundary condition file to a .txt file
                    - time to make a m_to_txt.py file
                    - got  it got it got it
                2. edits the necessary lines in the .txt file which correspond with the variables
                3. saves the changes to the .txt file
                4. converts back to .m file
                    a;reay have this in the form of txt_to_m.py

                - have written as a script, now time to simply adapt this to a function

                And now we have a function that takes the desired inputs, and rewrites the file

    building function for putting it all together: runFEM_1D_V3
        - should be the same as the other 1D function, except it uses the update method as well for the BC file (the .mat file is still necessary for changes to the overall matlab code)

        - time to put the function file BC.py into the main folder 

        - okay it's all good, time to:
            1. run in matlab to make sure it works
                - okay after much adjusting, I can get this to work
            2. change file using python function
            3. run again in matlab 

    - Okay I got the function to work. Now I have figured out how to do the chi^2 analysis inside the python shell. Now I have to get it working in a script file. It's not so hard, the line looks like this:
    chi_sq=np.sum(np.divide(np.square(ynew-y1),y1))

    - okay now I have to put the chi^2 part into a script file
    - I should probably prototype it first from the command line

    - working from the command line for a prototype...
        - okay I need to see how to open the save file
            - time to go into the python function and see how the file is saved and how the data is accessed

            a simple one line of code: mydata=io.loadmat('FEM_output/1D_run_output.mat')

            the function saves to the out_filename, so we will probably need to assess this there

            But of course I need to do the interpolation operation as well. 
                - I forgot how to do this
                    - figuring out interpolation
                    - okay I got it from the command line. Time to go take a break, and I can put this into a script after lunch

            Okay I want to put the chi^2 function in the file useful_functions.py so that I can call it easily
                - okay chi_sq_interp is defined so that given an array, it will simply return the chi^2 value

                ahh I forgot where I was

                Pretty sure the last thing I did was prove the chi^2 function is working properly, so let's try to figure out a next step from there

                oh yes now I remember, I saved chi^2 in the useful_functions.py file
                
                so the next step is to wrap up the analysis by putting in a function that returns the chi^2 value for the temperatures at each barrier


- Time to go in and look at the new code that Tyler just sent that generalizes the model to fit different experimental setups
    - okay looking at it, I think I understand everything
    - now there's a question of how to do the chi^2 since we are now analyzing all 3 runs at once
        -msg'd tyler about this, I think I will just return all of the chi^2, then sum them to get a single chi^2 value if necessary.

    - first off - I have to redo the python wrapper to run the new file(s)


- Redoing the Python wrapper...
    Okay first thing is to look at the combined matlab file: what variables do we need in the file?
        - it doesn't appear like we need all that much that is different from the original file
        - should just be a & b from the linear k equation, then whatever is needed for the BC file
            - to do:
                Make new function file: 1d_fem_v3
                    should be the same as the current 1d function file, except that it calls to different places, and that it outputs the chi^2 function

                    Okay I can't figure out which file was used previously. I want to find the one that I built before so that I can copy over the save part to the new .m file

Restarting the notes for this section, I have the following to do:
To-do:
    - rewrite 1d function in the new python file
    - edit the matlab file(s) so that the necessary variables can be manipulated accordingly
    - test the 1d function to ensure that it runs as intended
    - add in the chi squared calculation so that the python function simply takes the parameters as inputs, and returns chi^2 as the outputs

    I should be able to use minimize(method="BFGS") to get this done

    First order of business: getting python function so that it runs from the command line:
        - editing the matlab file so that it opens and saves variables accordingly.
            - have to figure out the name of the input parameter file that I want to use
            - okay so now there are some issues with getting the filepaths figured out
            - saved filepaths, I don't know how this is going to work, since the FEM is run prior to reading in the data
                error from the saving T11, T12, etc., deleting lines and running again...

                - good to go
        
        so the matlab file runs as intended, on to the next step...

    Now we need to make sure we can go in and open and check out the data in the save matrix in python
        good to go

    Okay so the matlab script runs, and we can go in and open up the output. Time to think about the process to use from here
        - have to use python to assess least squares on the variables
            - Beginning idea: function that takes the path to a .mat file as input, and returns the chi^2 values associated with the file
                - time to go to the chi^2 function to remind myself of how I wrote this
                - It should be pretty straightforward to do the chi^2 based off of the function
                - had to sidetrack because there are all sorts of new variables to write in the .m file. Writing as T11,T12, T13, T21, ..., T33
                    - a single line will look like (for the 73 data at the first temp, with arguments given ad variable names in the save matrix):
                        chi_sq_interp('tlist','T11','t_data_73','temp1_73')

                    - trying to run the above line in the python shell...
                        - after a lot of fuckery, it's finally working

                - got the command to write, now it's time for writing this into a python script
                    - check that - functions, and I can put this into useful_functions.py

                    got it, and had to break from work for meeting with prof wicks and the rest of our monday meeting group

    Now we that we have a function that takes the input and returns the data & chi^2, let's figure out a way to optimize it
        The optimizer works! With the nelder-mea simplex algorithm, but smooths out the lines so that they fit with the data

        I've got everything running well, but of course, it is optimizing for flat lines that fit more the tail end of the data. I want to cut off all data before the peak

        Got a lot done today.

            showed how to optimize the model. While this appears to work, there is no obvious convergence, and the model has a tendency to flatten out. Currently, I think this is because of the "flat" date that occurs at the beginning of each of the 9 data curves

    Now for where to go from hereL
        the main problem seems to be that I can't get it to converge on a value. 
            I can't decipher what the issue is. I will try to optimize a single curve: the first face from the run s88773

            Next steps to try for getting the optimization to run well:
                - include the start/stop times for the data to crop out the background data

            
            Test - isolating the chi^2 for the first face of the first dataset again resulted in a "flattening out" of the curve
                - implies that it is either the data at the beginning throwing off the fit, or there are too many parameters for the model to fit, or the fitting method is not sufficiently robust, or we need more iterations for a good fit

                new plan - writing the discarding part into the python file

            Okay I could wither put it in a python file, or I could just copy into another file, and edit the .m there

            I think I will go for the latter at first, then see where I get from there
                - okay firs tstep is to copy the file
                - need to get it to the point where I can play around with the parameters to see what works

            Okay I've got it working, now for the optimization
                - still no convergence, even when I'm isolating a single curve
                - first try: redo while printing chi^2 values
                - next step: edit in the matlab file

            Potential next steps:
                - trying square wave in the boundary condition file
                - fitting all chi^2 with


            - Test - get chi^2 on dataset, then get optimizer to converge













                        



                    

            





