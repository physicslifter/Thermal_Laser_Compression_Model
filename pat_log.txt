last===================================================================================
6/20/21
Next to-do: change filepaths in the document accordingly
    - 2 choices to do this:
            - write function for getting the relative filepath and plugging it in (preferably in Python)
            - write in the filenames, then manually change them as the file structure changes

    - for now, we can just manually change the filenames so that they work with the new paths. If this turns out to be an issue going forward, we can just write something quick in python to take care of this

Let's think out what we want to do...
    - We want the .m function, RunFEM.m to run with the input parameter file
    - Can start this by working in MATLAB to get it to run in the current file location
        - RunFEM takes only the input parameter file, which has the filenames, so it seems obvious that editing paths in this document would allow everything to run smoothly

    - changing the default input parameter file...

I previously tried to stop the times from printing in the transientBCHeatedBlock_square.m file. This seems to have caused some issues because now when I try to run the file, it won't run. Troubleshooting below:  
    - Going back in to uncomment the line
    - uncommenting
    - now that I think about it, I'm pretty sure MATLAB only prints the stuff if you don't put a semicolon on the end. 
        - adding semicolon...

    - and it works

    - next problem: filename concat not working
        - forgot to send the name as a second argument
        - okay now it runs

    - Okay now it runs. Have to get it to stop printing out that graph

    Getting the graph to stop printing...
        - commenting out the plot lione (28) in RunFEM.m
        - And it works!

    
Okay, now I've got the times to stop printing, and the graph stopped from being output. 

Now it's time to go on to getting the function to run from the cmd line in the python-matlab engine.

    - Running from the command line:
        - not working
        - using 2 arguments
        - okay now the cmd line is working


git status is now showing all parent folders as untracked files when I run git status. Now I have to figure this out before moving on, since I don't want to add all of these to the repo, since they are unrelated.

To-do:
    - *DONE* figure out git problem (ignore, or not add untracked files or directories)
    - change file mapping JSON to account for the fact that this is not on my computer. Everything should be a relative path, or nothing at all.
        *DONE*delete my computer's filepath from the JSON
    - *DONE*write python file, so that we can run it easily from the command line
    - *DONE*Add the 1-D version of the problem that Tyler sent me to the Github
    - edit the github files so that everything can run properly on any machine
    - Figure out how to get the function file to talk to the main script in MATLAB

Figuring out git problem...
it was because I was still in the other directory, testing to make sure the files worked. Going back into the directory...

- leaving the JSON file mapping problem for a bit and focusing on getting the python to work.

Getting Python file to run from the command line...
Picking up where I left off last week, there should be a test file with the special name "cmd_line_test" that I ran last week from the command line.
- Now I remember where I got stuck yesterday - on the problem where there are "too many output arguments" This is why I was trying to get the code to run in MATLAB yesterday, and why I was trying to get it to the point where there is no output. Back to the MATLAB file to see if there is any output when we run it.
    - Running the FEM with the run name "output_check1"
    - checking output file...
    - There it is, and there are no outputs associated with it.
    
- So MATLAB is to the point where there are no outputs, the function simply saves a file. There is still the problem with having the call the 2d transientBCHeatedBlock_square function, but we can leave this for now and see if it leads to any complications. For now we have to go back to the python cli and see if we are still encountering the same difficulties there
    - running the function in python through the python engine for matlab...
        - This didn't seem to fix our problem. I have to figure out what to do with the engine to get it to run
        - I may have just stumbled on it! - might have to do nargout=0, this seems to ring a bell
            - this works! saved as cmd_line_test3

Finally, the next step: putting all of this inside of a python script that will run automatically.

- Putting it into a python script...
    - this should be straightforward, I'm going to start out with just putting my lines into the command prompt into a line of code.

    -I've now got a function defined in a python script, I now need to remember/figure out how to run that function from the command line.
    - I wrote a second function that takes a simple input to run fro the file as a test
    - working on importing a function in python in the command prompt...
    - Okay I got it to work, the problem was that I was importing the matlab engine inside of the function.

- Adding new python stuff to the repository
    - I've made all of these changes in the local file, where I know everything works smoothly. I have not gotten the github to run cohesively yet. The final step to getting to do this is adding the new files to the repo  
        - run_model.py has been added to the repository

- Now for the task of getting the code to work ...
    - I'll start with just trying to get the code/functions to work in the MATLAB file


Today I need to pick up where I left off and work on getting the code to where it can function on any machine.

Getting the code to work...
    - 

    -----
    ----
    ---
    --
    -

===========================
Future tasks:
	- get python code in working structure of classes and functions
	
---------------------------
Picking up where I left off yesterday...

trying to get the code to function on any machine
	- okay, let's go see how to run the fucntion currently, it should be in the folder WicksLabWork
	- have to make sure I'm in the right repo, because earlier commands are coming back from a different repo
	- nvm, I'm good, I just have to be inside of the Thermal_Laser_Compression_Model folder
	- checking the inputs required
		- same as the matlab function, but we have to call the function from this file

	- writing a quick script to prove that this does indeed work
		-troubleshooting the script...
			- trying from the cmd line
			ahh import error
		- there's something wrong with how I've coded these functions, I think I might have to import the matlab file at the top of the file where I define the functions

	- Before I could get the function to run from the command prompt, but it is really important to make sure that I can run the function in Python

Whatever, I just threw the function in, I can figure everything out later

Okay now I should be good to move the files over to the Thermal_Laser_Compression_Model, and then start working from there to get everything working cohesively in github

- Getting the code to work
	- transferring the new files from WicksLabWork
		- prove_working.py is the only real file to move for now.
	- check filepaths in the default mat file to see that they are correct for the current file setup
	- have been troubleshooting for a bit now, I think the next step is to go into MATLAB and try to solve it from that end of things
-
--
---
----
-----

=================================================================================
=========================================================================

Troubleshooting the code in Matlab...

    - running function in WicksLabWork folder...
        - okay it works here, but not in the other folder
    - okay let's go through and find all of the points where there is some external code referenced (next step is to go look at the setup of the file structure)
    - Figured it out! the problem was that there was no variable t, and now I see it is because I had commented it out. I must have copied over the file while I was troubleshooting the problem that I was having with the fuunction with the transient heated block. 
        - I uncommented the line, and added the new solution, which is a semicolon at the end of the line. I forgot Matlabs syntax, and that to remove the colon at the end of the line is to print the output haha
            - output saved as test 11


Proving you can run the repository functionally...
    - when I go to the repo, open python, and try to just import the function like: from prove_working import fem_run, it actually runs the file prove_working.py   
        - I tried this because yesterday when trying to import the function from thje function file, it wouldn't work, and also trying to run the prove_working.py file did not work'

    - Now I'm trying commenting out everything other than the actual function itself and seeing if this still works
        - it imports fine...
        - my test run (output saved as pat1) worked just fine
    - While I wait for the py code to run, let's go check matlab to see how the 1-D function differs from the 2d (if at all)
        - most effecient way seems to be to just try to run the function with 1d and see what happens. will try in matlab
            - have to copy it into the subfolder first
            - failure because some other function is mentioned
            - leave for now, I have more worthwhile things to work on


Okay next up...
    - we need to be able to write an input matrix in python. Something that takes input variables, then writes a matlab matrix, then calls that matlab matrix in the fem_run function.
        - go to the writing a default matrix file in python and 
    - On flip side, we also have to figure out how to assess our data
        - check notes from last time to see how Tyler wants to assess
        - have to change the naming technique in matlab to be more general
            - just saves as the run name now
        - now we have to run the model, then go grab the matrix from the model and assess the data
            - for this, we need to do read in the .mat matrix that it saves as, as a python matrix, or a numpy array, pandas, dataset, etc.
                ideally, our python function would do this

        have the data, now we have to figure out which variable in the file is actually the output data

===================================================
===================================================
Notes on 6/28/2021
--
To-Do's:
    - get python code to the point where I can write in variables to an input file
    - write Matlab function to create a function with some specified parameters, then call an instance of that function before the lines where the transientBCheatedblock function is called
    - sync files to github
    - set up Zoom meeting with Tyler for today
    - set up recurring meetings for us on Mondays at 10am
--------------------------------------------
Notes:
    - creating the macro transientBCheatedblock function...
        - let's think about what we really need here... what do we really need to make the Matlab code execute exactly as it does now, while still being able to manipulate variable(s) between the function file and the MATLAB script
            - first off, it has to be stored in a separate file, but one that is in the same folder.
                - we could do this by creating the file, putting it in the current directory, then later calling it when we call the transientBCHeatedBlock function in our code. Finally, we would have to delete the file from the directory, so that there are not endless files stored in the folder
            - So, the steps to go throughh in the file in order are:
                1. create a function for the boundary conditions with the specified parameter(s)
                2. write the created function to its own file
                [CURRENTLY IN CODE]3. Call the function/file in the code
                4. Delete the created function file from the directory
            - Before we can actually do the previous, we need to:
                1. include the variable in the python file to create the default input matrix
                2. Call the variable in the matlab file when reading in the .mat matrix file

        - Changing the python script to include peak_temp as an additional paramter...
        - running the script to generate a new .mat input variable matrix
        - Now I have to edit the function in Matlab so that it also takes the peak_temp variable
        - Now it's time for writing the function in MATLAB...
            - first looking @ how to write a function in MATLAB
            - I don't think it will work, but I will try to start by just writing a function that creates another function and then saves it

        - New idea for how to get it to work:
            1. save .mat file with the peak_temp value
            2. Call a python script that:
                1. Reads the .mat to get the peak_temp value 
                2. writes a function to a file, with specified peak_temp parameter
                3. in Run_FEM, we can call the function, which is saved in accordance with the peak_temp value
                    - if we always save the function in the same place, and only rewrite it when we have a new peak temp, we dont have to worry about writing a function, we need only to write a script
            - Looking at how to write a .mat file in python...
            - Okay, the .mat file has been written, now it's time to write a new boundary condition function, where peak_temp automatically reads to the file
                - just demonstrated that the variable can be written in python, then moved into matlab

            - Now I've updated the function in matlab, we now need a python function that does the following:
                1. writes user inputs to matlab file
                    - wow, hold on, we can just read the variable from the original variable file, the default input matrix
                        - rewriting matlab file again...
                        - and checking to make sure it works...
                            - Good & Good!

                    - small problem in MATLAB - it's still printing the plots, we don't really need to fix those though at the moment
                2.We want to be able to do some function like:
                FEM(parameter_dict), which will then return a nx3 numpy array with n # of time points, and time, real temp & model temp, along with an np array of the parameters, or we can just throw the two into a larger array that is divided up into 2 subarrays

                    - let's just do FEM(parameter numpy array), so that all inputs and outputs of the function are a numpy array
                        - just wrote an np-to-mat function to use at the beginning of the code, so that we send in info as an numpy array
                - writing down desired flow in notebook...
                - FEM output is saved in .mat files, so now we need a way to read .mat files into python, and manipulate them to get what we want as numpy arrays

        Have to go back and define the input parameters in it's own file...

=============================================================================================
=============================================================================================

Tasks for today:
    - finish the code framework in Python for iterating the model with differing parameters
    - figure out what's wrong with the matlab file (returning a flat temperature profile giving the 20K data)

--
Notes:
    - Working on getting the model to work properly 
        - staret with Tyler's code file that he sent me and see if that code outputs the desired results
        - going into the code...

- okay stop with the code, I'm not sure what I need to do to get it working, and it seems obvious that the most practical way to continue is to focus on getting the wrapper complete so that we can iterate through parameter space

Working on the wrapper...
    - let's refresh ourselves on where we are...
        - Let's go see if I was running the original file that Tyler sent me, or if it is the edited one that I am working with 
            - okay well it appears that the file will not complete running because it is trying to plot against the array t_data, though this variable does not exist.
                - looking for t_data in the other code file

    - have to pick up where I left off...
        - I think I remember looking for the t_data variable, and then it turns out that this was from the transientBCheatedblock file
        - let's go back and run the file that's in the main folder of the git repository first
            - after running, we can assess what works and what doesn't, and then try to work from there 
        - Running the file  
            - problem with the .xlsx file that the matlab code points to    
                - incorrect path
            - fixed the path problem, now trying again...
                - still getting the error with the filepath
                    - how to troubleshoot this?
                - ahh, still a different name for the filepath
                    - fixed again, trying again
                    
            - new problem: errors with reading in the data from the excel files 
                - probably something to do with the column headers
                    - troubleshooting...
                    - could I just write a python function for this?
                        - maybe it:
                            - takes filepath as input
                            - goes to the file and opens the excel file
                            - gets the filenames, and changes them to a convention that works well in matlab

                    - python function probably too much work for now, I will see where else I can troubleshoot this in order to get it to work
                        - seems like I can just play around with the variable names in matlab until I can get this to work
                            - changing the capital U to lowercase (Um ==> um) does the transientBCheatedblock
                                - changing for all 3...

                        - running again...
                            - And it works!! It doesn't just return static values like the function was doing.

                    TIme to take a second and add all of the changes to the repo
                    - had to exit out of the file to commit all of the changes in the repo (since it includes changes to the log)

                    - okay so the matlab file workssssssssss

        - file returning the correct output, so now we have 2 choices for where to go from here 
            1. build new function from scratch, checking at each step to ensure that the inputs will function properly
            2. compare function to the properly working code

            - before I decide what to do, I want to run the script file in the python folder    
                - running the file...
                    - not present in the python_wrapper file
                    - where to go from here? ......................

            - let's try to compare the two first
                - from the meeting with tyler last week, I don't think that the issue was in the trnasientBCheatedsquare function, so I'll start by just looking at the runFEM function
                - appears to be the same through the first file (fitting_data_73ref)
                - onto the script that outputs the FEM fit (heat_equation_2d_square.m)
                    - fitting file ends w the lines:
                        figure
                        plot(t_data,temp1_corrected,'o',t_data,init_fit,'-')
                        legend('data','fit')

                        - these lines are commented out in the RunFEM file
                         variables d,c,t0 &w, etc are defined next, time to check if these are all defined in the input file
                            - yes all there
                    - fuck it, let's run the function, and see what the output is
                    - times are printing as they are supposed to
                    Not working
                        time to try building this from scratch
                        we will have another file, run_FEM2
                    
    BUILDING run_FEM2()
        - goal
            - build model that simply loads an input file, with a static name
                - fits in with broader scheme and plan for what to do in python
                    - what to do in python:
                        - create function that:
                            - takes parameters as input
                            - writes the parameters to the default .mat file
                            - runs the FEM function
                            - return data 
            -
        Step 1 - adding in the fitting_data file to the top of the fem_run script
            - built the runFEM2 file, now time to put the reading in at the top (fitting_data_73ref.m)
            - have to change filepath, since we're now in the python_wrapper folder
            - running the file...
                - notes on output:
                    - it works and returns what it should.
            
            - DONE

        Step 2 - checking if transientBCHeatedBlock_square still works, when using the default input matrix as input
            - changed peak=28000 to peak=peak_temp
            - running the file...
                - notes on the run...
                    forgot to clear variables...
                    cleared now running again...
                    notes:
                        - good to go!

            DONE

        Step 3 - changing script file so that it reads input parameters from the default .mat file
            - look at file and same time, and comment out inputs    
            - look for values that Tyler gave me that are the important parameters for the model
                - can't find where I wrote that, just read in everything
                - running with the .mat file read at the toop, and anything that could be a variable cancelled out  
                    - error: need to write file name/path to a variable input_parameter_file
                    running file...
                        - notes on run...
                            - And it works!

            DONE
        
        Step 4 - save it to a default output file
            pasted in the code and saved it to "run_output.mat" in the fgem_OUTPUT folder
            - running the code...
                - problem with saving - have to write the variables 
                - fixed now running again...
                    it ran, time to check to make sure it worked well
                        - values:
                            works
                        runs and saves well!

            DONE

        Now for writing the python script that goes around this...
            Steps for the run in python:
                1. write to input file
                2. run the runFEM2 file
                3. read in output .mat 
                4. return the output data

            - writing to input file
            - good to go

            - installing matplotlib, so that we can check out the data
            
            got stuff working from the command line, time to put a plot together

=====================================================================

- getting the code to run with all of the variables that we were talking about yesterday
    - variables to add:
        - start_time 
        - a (in k=a*x+b)
        - b (in k=a*x+b)
    - first task: add the variables to the python file
        - done
        - done 
        - done 
    - second task: add variables to the matlab file
        - finished
    - third task: add variables to the python file (run)

Next task - get the python wrapper working for the 1D model to see how fast we can run updates.
    - let's look at the 1d model and compare to the 2d model to see what we have to do
     - I think I edited the file a bit thinking it was the 2d file, getting the original...
     - okay I think I need to write the equivalent of the transientBCHeatedBlock function, this time for 1d
        - time to go into this function to see if there are any key elements that would have to change for the change from a 1d to 2d scenario
        - reading the 2d equation, I don't see any reason why we can't just run the same function with the 1d version. trying this now...
            - I think I'm pointing to the wrong input matrix file...
                - in opening the python function, we can see that we should poiint to "input_matrix.mat"
                    - And it works
            - now trying to run the file again...
                -keep getting errors, I think I have to read in the data first
            - reading in the data makes it work better, now getting different errors
                - stupid thing where it shows a blank line is an "invalid character" idk why it does this in MATLAB sometimes
                - 1D works! And boy is it fast!,
    - boom boom boom okay now I have to write the variables into the MATLAB equation, and write a runFEM1.py function for the 1D FEM model
        - also we have to change the filenames to matrices for the one dimensional model
            - write all in to do cmd_line_test

    1-D python wrapper to-do list:
        1. merge reading in the file with the new function 
        2. add create_default_mat file for the 1d case
            - have to write list of variables that we need to write to
        3. edit 1D MATLAB function to write to unique save file names, and to read from a unique input file name
        4. write python function file for the 1-D case: runFEM1.py

    - Merging data reading with new function
        - completed as file runFEM1.m

    -  script for creating a default .mat file in python
        -wrote script, testing now
        - opkay the test worked, on to the next step

    - rewriting the matlab script and associated function to read in the variables from the file, and to function properly as they do without reading in the variable file
        - in the main script...
            - just the inputs for k, I forgot we can leave the file paths out of it for now
            - rewritten, now time to test
                - good to go, it runs
        - in the boundary condition function...
            - peak_temp
            - diffusivity
            - time_shift

        - all the inputds were rewitten, now time to do thje output file
            forgot to save to uniqe filename, redoing...



    Next step is to write the python functions for running the equation
        - this should be pretty easy enough with copying over the 2D version of the code
            -DONE 

        - and automating a dcript to prove this works
            -DONE
    
Now for the optimization part...

First: the code takes 4 minutes still to run. While running the code, it seems obvious that this is due to having to read in the new variables every time, because it was so much faster before having to read in the variables, and the times print at a much slower rate, indicating that a significant portion of the slowdown is due to something in the boundary condition function
    - could try: writing and saving the boundary condition file in python at the beginning of the loop, before running the main runFEM file
        - look up: how to edit a matlab file in python
            - still might work, but the tutorial I found only provided a way to manually edit the code, we need to automate this

        - new strategy options: 
            1. use python to write a new file every time before running
            2. use matlab to write a (function-writing function)
            
        Strategy 1 - using python to write to a new file every time 
            - looking up how to edit a matlab file in python
                - can edit a read in file in python easily using .readlines() after opening the file
                    - but can we read in a .m file?
                        - yup, it works
                - okay reading in seems to work well, now how about editing?
                    - manipulating...
                        - I think I can edit, left off here, so will have to restart here
                        - pausing quickly to upload current version to repo...
                            - good to go
                    - okay back to the manipulating, can I edit and manipulate a .m file in python, then save it and run it?
                    - huh, I can't seem to be able to get it to work as I did before, (from the command line), I wonder what are the reasons for this
                          - trying to get the file editing to work from the cmd line
                            - still working on this, I'm not totally sure that this will work
                            - need backup plan in case this doesn't work (function-writing function)

                            - following tutorial from the web for how to convert .txt to .csv 
                                idea here is that once this is possible, I should be able to convert .txt to .m. Then edit as .txt, save as .m, then run as .mat

                                pausing to check slack

                                gtg, noe back to the code tutorial

                        - writing some test code in the .txt file
                            - need some code that will print something so that we know it's working
                    

                        - the csv works, and saves as a .csv file
                            - but it uses a pandas method to_csv
                                - time to see if there is another way to do this...
                                - online there's that one article that shows we can just do this programatically from the command line
                                    - now the problem becomes how to run command line functions/commands from python
                                        - apparently this is possible via the os module, linke here: https://datatofish.com/command-prompt-python/

                                        cmd /k for running a command and keeping the cmd window open
                                        cmd /c run a command and close the window upon execution

                                        - okay now I can successfully run command lines from python. 
                                            - time to go back to the website talking about changing .txt files to .m files & see what I have to do

                                            going back to the website...
                                                - according to the site, I can run the command: "!ren *.txt *.m" from the windows command line, and this should convert all .txt files to .m files (that can run). From the matlab forum: https://www.mathworks.com/matlabcentral/answers/320137-how-to-change-txt-format-automatically-into-m-format

                                                
                                            - okay back to running command line functions/commands from inside of python
                                                - okay it seems I have he hang of it
                                                - check directory to make sure we're in the right place to change the files
                                                - everything looks good, let's try running the command
                                                    - returns error: '!ren' is not recognized as an internal or external command,

                                                - it seems that the problem is throwing because the operation is not installed on the system
                                                    - it works if we do ren instead of !ren
                                                    - now trying running the file in python

                                                    Boom! Good to go! sample1.txt has been converted to a .m file and now runs!

            - okay I now know how to convert a .txt file to a .m file and in a way such that it will run
            - task 1 - writing a python script that generates a .txt file with the same format as we have in the matlab boundary condition file
                - first off- can we switch back to .txt (if so, it's not necessary to write to a new file each time)
                    - yes, okay we can flip right back & change to a .txt file
                - next task: figuring out how to edit the .txt file
                    - copy in 1d boudary condition file
                    - now let's see if we can write a script that opens it and changes the values of the parameters, then changes it back to a .m

                    - have written the lines that work in command prompt. time to write a script that does this for me



            - task 2 - writing a python function that:
                1. changes boundary condition file to a .txt file
                    - time to make a m_to_txt.py file
                    - got  it got it got it
                2. edits the necessary lines in the .txt file which correspond with the variables
                3. saves the changes to the .txt file
                4. converts back to .m file
                    a;reay have this in the form of txt_to_m.py

                - have written as a script, now time to simply adapt this to a function

                And now we have a function that takes the desired inputs, and rewrites the file

    building function for putting it all together: runFEM_1D_V3
        - should be the same as the other 1D function, except it uses the update method as well for the BC file (the .mat file is still necessary for changes to the overall matlab code)

        - time to put the function file BC.py into the main folder 

        - okay it's all good, time to:
            1. run in matlab to make sure it works
                - okay after much adjusting, I can get this to work
            2. change file using python function
            3. run again in matlab 

    - Okay I got the function to work. Now I have figured out how to do the chi^2 analysis inside the python shell. Now I have to get it working in a script file. It's not so hard, the line looks like this:
    chi_sq=np.sum(np.divide(np.square(ynew-y1),y1))

    - okay now I have to put the chi^2 part into a script file
    - I should probably prototype it first from the command line

    - working from the command line for a prototype...
        - okay I need to see how to open the save file
            - time to go into the python function and see how the file is saved and how the data is accessed

            a simple one line of code: mydata=io.loadmat('FEM_output/1D_run_output.mat')

            the function saves to the out_filename, so we will probably need to assess this there

            But of course I need to do the interpolation operation as well. 
                - I forgot how to do this
                    - figuring out interpolation
                    - okay I got it from the command line. Time to go take a break, and I can put this into a script after lunch

            Okay I want to put the chi^2 function in the file useful_functions.py so that I can call it easily
                - okay chi_sq_interp is defined so that given an array, it will simply return the chi^2 value

                ahh I forgot where I was

                Pretty sure the last thing I did was prove the chi^2 function is working properly, so let's try to figure out a next step from there

                oh yes now I remember, I saved chi^2 in the useful_functions.py file
                
                so the next step is to wrap up the analysis by putting in a function that returns the chi^2 value for the temperatures at each barrier


- Time to go in and look at the new code that Tyler just sent that generalizes the model to fit different experimental setups
    - okay looking at it, I think I understand everything
    - now there's a question of how to do the chi^2 since we are now analyzing all 3 runs at once
        -msg'd tyler about this, I think I will just return all of the chi^2, then sum them to get a single chi^2 value if necessary.

    - first off - I have to redo the python wrapper to run the new file(s)


- Redoing the Python wrapper...
    Okay first thing is to look at the combined matlab file: what variables do we need in the file?
        - it doesn't appear like we need all that much that is different from the original file
        - should just be a & b from the linear k equation, then whatever is needed for the BC file
            - to do:
                Make new function file: 1d_fem_v3
                    should be the same as the current 1d function file, except that it calls to different places, and that it outputs the chi^2 function

                    Okay I can't figure out which file was used previously. I want to find the one that I built before so that I can copy over the save part to the new .m file

Restarting the notes for this section, I have the following to do:
To-do:
    - rewrite 1d function in the new python file
    - edit the matlab file(s) so that the necessary variables can be manipulated accordingly
    - test the 1d function to ensure that it runs as intended
    - add in the chi squared calculation so that the python function simply takes the parameters as inputs, and returns chi^2 as the outputs

    I should be able to use minimize(method="BFGS") to get this done

    First order of business: getting python function so that it runs from the command line:
        - editing the matlab file so that it opens and saves variables accordingly.
            - have to figure out the name of the input parameter file that I want to use
            - okay so now there are some issues with getting the filepaths figured out
            - saved filepaths, I don't know how this is going to work, since the FEM is run prior to reading in the data
                error from the saving T11, T12, etc., deleting lines and running again...

                - good to go
        
        so the matlab file runs as intended, on to the next step...

    Now we need to make sure we can go in and open and check out the data in the save matrix in python
        good to go

    Okay so the matlab script runs, and we can go in and open up the output. Time to think about the process to use from here
        - have to use python to assess least squares on the variables
            - Beginning idea: function that takes the path to a .mat file as input, and returns the chi^2 values associated with the file
                - time to go to the chi^2 function to remind myself of how I wrote this
                - It should be pretty straightforward to do the chi^2 based off of the function
                - had to sidetrack because there are all sorts of new variables to write in the .m file. Writing as T11,T12, T13, T21, ..., T33
                    - a single line will look like (for the 73 data at the first temp, with arguments given ad variable names in the save matrix):
                        chi_sq_interp('tlist','T11','t_data_73','temp1_73')

                    - trying to run the above line in the python shell...
                        - after a lot of fuckery, it's finally working

                - got the command to write, now it's time for writing this into a python script
                    - check that - functions, and I can put this into useful_functions.py

                    got it, and had to break from work for meeting with prof wicks and the rest of our monday meeting group

    Now we that we have a function that takes the input and returns the data & chi^2, let's figure out a way to optimize it
        The optimizer works! With the nelder-mea simplex algorithm, but smooths out the lines so that they fit with the data

        I've got everything running well, but of course, it is optimizing for flat lines that fit more the tail end of the data. I want to cut off all data before the peak

        Got a lot done today.

            showed how to optimize the model. While this appears to work, there is no obvious convergence, and the model has a tendency to flatten out. Currently, I think this is because of the "flat" date that occurs at the beginning of each of the 9 data curves

    Now for where to go from hereL
        the main problem seems to be that I can't get it to converge on a value. 
            I can't decipher what the issue is. I will try to optimize a single curve: the first face from the run s88773

            Next steps to try for getting the optimization to run well:
                - include the start/stop times for the data to crop out the background data

            
            Test - isolating the chi^2 for the first face of the first dataset again resulted in a "flattening out" of the curve
                - implies that it is either the data at the beginning throwing off the fit, or there are too many parameters for the model to fit, or the fitting method is not sufficiently robust, or we need more iterations for a good fit

                new plan - writing the discarding part into the python file

            Okay I could wither put it in a python file, or I could just copy into another file, and edit the .m there

            I think I will go for the latter at first, then see where I get from there
                - okay firs tstep is to copy the file
                - need to get it to the point where I can play around with the parameters to see what works

            Okay I've got it working, now for the optimization
                - still no convergence, even when I'm isolating a single curve
                - first try: redo while printing chi^2 values
                - next step: edit in the matlab file

            Potential next steps:
                - trying square wave in the boundary condition file
                - fitting all chi^2 with


            - Test - get chi^2 on dataset, then get optimizer to converge

Okay, now the question is where to go from here
    Can just start with the chi^2 problem and go from there
        okay first up: let's look up if chi^2 is a reasonable way to assess the fit for this situation

        Oh yes, I also forgot yesterday to specify the bounds that Tyler gave me from the other day. I think I will do this first, then begin with looking into chi^2
            - okay got the optimization going with the CG algorithm, which just does a numerical gradient

    - back to the chi^2 problem - Is there a standard way to get chi^2 between 2 differently spaced sets of data (or data arrays of differing length)?
    - next up is figuring out how I put in the bounds to the optimization problem

August 2, 2021
Working on running the model more...
    Okay, to begin, I'm running an optimization using Nelder-Mead, and the initial parameters from the matlab file
        - idea here is to see if we can actually improve on the initial fit
        - if this doesn't work, the next step is to use the square wave boundary condition file
        - saving the run data in Optimization_runs subdirectory

        - converged at 15 again, let's go see what the fit looks like
            - check against the initial parameters and see if the fit is better visually
            okay it was fitting the Li and Mg windows, it turns out we just want to look at the Fe runs first
            - ahhh I see some of the parameters have flipped negative, this makes no sense to me, but matlab appears to be optimizing towards flat lines

        - The flattening out effect is still occurring when I fit the 3rd data run. Time to go back to the first data run and see if the flattening out occurs here

        - Need to change the file so that it saves/prints the parameter values as well

    TO RECAP:
        fit flattens out when fitting all at once
        fit flattens out when trying to optimize the two Fe windows
        fit flattens out when optimizing s88780
        fit works well when optimizing s88773

    - Let's test the 3rd point quickly by running the s88780 data
        - wow tlist only goes up to 4ns, could this be the problem?
            CHECK OUT LATER

    - okay, so the fit works well for s88773, it flattens out for s88780, what does it do for s88776?
        - s88776 appears to work well, saved as run6 for today
        - now trying while I allow the time to go longer for the sim data
            - it seems we get basically the same results

    - Trying s88780 with the extended line lengths on the model output
        - it worked at first (run 7) and appeared to be converging towards a good fit with very low chi^2 (~chi^2 = 2). What I changed here is the time shift from 1.8 ns to 18ns
            - first troubleshooting attempt: extend the minimum a little bit
                obviously yields a bad fit. Let's run it identical to how I did the earlier run, and let's see if the optimization returns the same thing
            - second troubleshooting attempt
                - trying to replicate the original 
                    - replication worked, and now I got an output graph for the run

            - it seems obvious these problems are from the time shift, and I have a hunch it's trying to match that one outlying datapoint. I have to:
                A) figure out how to mask outlying datapoint in scipy
                B) mask data point in the data set
                C) cut off data
                ...
                & then see if it will fit


        I've found that the differential evolution method is possible in the scipy optimization package. This is what I should use for the next attempt at optimization

To-do for the rest of the day:
    streamline process
        - create new python function that:
            1. reads out data to excel file, where plots are automatically updated
            2. saves plots from matlab file
            3. puts all files from the run into a nice folder

==============================================================================================
September 3, 2021

Starting again the writing in daily format...
 Okay, so this AM, I need to work on creating a GUI for when the simulation run is going down  

 - can start this task by reading in data that I already have from previous runs from an excel file that I have saved. Then I can build up the GUI from there, simulating a live data run

- I will do this all in a new folder called "GUI_testing"

- Step 1 - write a script that reads in the excel data with some pause to make it realistic
    - I think that DASH will be good for the visualization, I will have to look more into this. For now, onto writing the script...

    - Reading in excel data...
        - can use pandas. Need to install this and xlrd
        - installed xlrd, installing pandas now..
        - okay now time to make it work from the command prompt
        - I will start with run 6 on August 2nd
            - ahh now I see this run is no good, since we only have the data for iteration and chi^2. I have to use a newer optimization run where I return all of the data, not only the chi^2
                - time to go see which one(s) work
                    - run 2 from August 18 works
NOTE - I need to redo the excel files so that they automatically set up initially with some template that is unchanging

        -  okay now going from where I was previously with the run 2 from Aug 18
        - nice it works, now I have to make a new script file where I will put all of this reading in, read_data.py
        - time to figure out how to write data into the optimization_data file

        - time to go check to see how I did it before (when printing the values to the cell)

==================================================================
September 7, 2021

Today I am continuing work on the GUI. I think I can build it with matplotlib and am working from this tutorial here: 
https://pythonprogramming.net/python-matplotlib-live-updating-graphs/

- okay I wrote a function that I think should work, but I' fairly certain I need to put it all into the same script file, a singular script file

- to get this to work I need to write another script that updates the plots, calling the functions in my GUI function file...


- The GUI works!! No that is really cool!

September 9, 2021

Okay now today I've decided to start building the finite element model inside of python. We have had far too many issues with the model. So far, I've only run it on my computer, and we cannot get it running on the lab computer, because Niklas says that I cannot be made an administrator on this computer. There are several installation things I need as an admin, and at this point, it would just be simpler to run it all in Python so that I can just write code and not have to worry about anything else. Onward!

Okay I'm starting by reading the SfePy documentation, available here: http://sfepy.org/doc/



Okay now the point is to get sfepy going so that I can create the new model

==========================================================
September 13, 2021
=====================================-=-=-=-=-=-=-========
- From here I need to create the sfepy setup
- I need to learn how to do sfepy the setup
- The first and most obvious step is to create the mesh
    - I need to create the mesh in the same way that the mesh was created in the matlab file (since we're solving the same problems)
        - time to go look inside of the matlab file, and find:
            1. the geometric dimensions of the mesh
            2. the differential equations governing the mesh
            ...
            Finding the geometric dimensions of the mesh...
                Mesh created on line 91 of matlab file: 'heat_equation_2d_square.m':
                    "msh = generateMesh(thermalmodelT,'Hmax',0.05e-6);"

                    - need to find out about the mesh function in matlab...
                    
                    - need to track down the origins of thermalmodel1T to figure out what this does, and how it is made
                        - line 59: "thermalmodelT = createpde('thermal','transient');"

                            - for this, I need to find out about the createpde function in matlab
                                - this function just serves to create the model, what really matters is the equations that govern the model
                                - onto figuring out the ThermalModel
                                    - from matlab site: https://www.mathworks.com/help/pde/ug/pde.thermalmodel.html
                                        - Now I'm reading about the differential equations required for a thermal model, specifically a thermal transient temperature model, like the one that we are trying to make for this project. I included some of the resources that I am trying to use below
                                            - after a lot of looking on wikipedia & elsewhere, I think I can use this site: https://en.wikidark.org/wiki/Thermal_diffusivity

====================================================================
September 14, 2021
====================================================================
- Okay I need to pick up where I left off yesterday, but first and most importantly, I need to sync and update the repository to where it currently is
    - cool, got that done - now back to where I was yesterday

                    - Okay now I understand the thermal partial differential equations (or at least I believe I do)....
                    - now I have to figure out how to set this up in sfepy... but not until I get a coffee first

                    I've got coffee, now it's time to go set up the mesh. I'll try to get this completed by the time that I meet with Tyler

                    - okay so I am watching a tutorial on how to create a mesh using the vmsh app (which is required for using sfepy)

                    ====================================================================
                    - MAKING THE MESH...
                        - before I can do anything, we need to get the dimensions in the problem set up
                        - ahh yes back the generate mesh function in matlab...
                            How do I find the dimensions in code???
                            
- Once again, I failed to save my most recent notes in code, have to remmeber to do this before signing out for the day
- Now I'm going to go in and make it so that I am sending in the square wave

- GETTING THE SQUARE WAVE TO work
    - LOOKING AT RUN_1D_FEM_v3
        - I will have to create a new function for reading in the square wave in this file
            - creating the function...
            - need new matlab file
                - created new matlab file
                - created new boundary condition file
                - running the file with the square wave file works well
                    - have to edit BC file so that the start time can be manipulated
            - need new function for changing parameters
                - wrote the function for changing parameters, now it's time to test it before moving fwd
                    - can't test on lab computer, need to test on laptop, since the matlab-python engine isn't working
                    - need to sync the repos on the two diff computers
                        - finally got it synced, after dealing w several errors
                    - now time to test the new function
                        - Boom! okay it works on my laptop
        - also need to add new functions for run_peak_model, & simple_peak_run

        - time to go back to the run_sqwv_model function to edit properly
            -synced up the new repo, now time to edit
            - should be good, it is now saved as simple_sqwv_run(parameter_array)

- MESH
    - finally got it qorking & saved the initial version as Mesh_1_quasi-dims
==================================================================
September 15, 2021
===================================================================
Biiig mistake, I forgot to save all of my stuff before signing out yesterday. Of course, this is a problem, so I HAVE to REMEMBER to save my notes before logging out.

Today's goals:
- Build model in sfepy
- make slide for Hyades subgroup meeting
- make mesh for slide in Hyades subgroup meeting
- copy over the GUI file so that I can read the results of the optimization in real time
- optimize the python-matlab model
- Build FEM mesh
--

BUILDING SFEPY MODEL
    - obviously, the first step to this is creating the mesh
        - I will put notes for the mesh down where I am creating it for the HYADES meeting today, and then I will continue afterwards up here

MAKING SLIDE FOR HYADES subgroup
- June said I'm exempt for this, since I have class 1030-12. I will have to add this to the to-dos for tomorrow

MESH FOR SLIDE
- see notes for above task

MOVING GUI

OPTIMIZING MATLAB-PYTHON MODEL

BUILDING MESH
- even though I dont have to present today, I still have to make the mesh for the project, so I'll store the related notes here.
- working from Youtube video...
- okay now Ive successfully got the mesh built, it's time to read the sfepy documentation and figure out what the next step is

=============================================================
September 17, 2021
=============================================================
Today's to-do's:
1. get sfepy model built
2. run more optimizations using isolation/troubleshoot method
3. sync the changes from my computer to this repository

------

BUILDING SFEPY MODEL
- yesterday, I completed a generic mesh, today the first items on my agenda are:
    - create unique mesh for the dimensions of each experimental setup
        - have to look in the matlab file & see how the geometry is attained/defined there
        - geometric dimensions are dependent on the ratio defined to account for the compression of the material, which is in turn dependent on the density. These values are defined below, in addition to the geometric dimensions. These values are necessary for both the Fe sample, and the MgO window
        - Definitions:
            density=12500
            ratio=

SYNCING CHANGES TO repo
- have to sync changes from my laptop this AM to the lab computer
    - merge error with 2 files:
        - BC_extenal_exp2.m 
        - fem_output/1dcomborun.mat 

    - firs tthing to try
        - copying files from the online github repo to thhis computer   
            - this worked before for this issue, I think it should work now
            - file 1
                - Done
            file 2
                - Done
        - good to, it works
    


RUNNING optimizations
- run 1:
    - changed the matlab file so that it did nothing with start_time, but the model_run function in python still took start_time (or whatever I call it as one of the inputs)
        - this had no effect on the optimization, as it appeared to be the same optimization as before

IMPORTANT NOTE: I found out that I still had the code to read back chi^2 0:3, which means that it is only optimizing for s88773
fixed the code
    - code not totally fixed, it still isn't fitting the final data line for s88780
        - I'm letting it run for a bit on my laptop just to see what happens. The final lines for each run aren't too great anyways, so let's see what happens
- run 2:
    - run that left out the final data line

- run 3:
    - fitting the first step from the three data runs
    - SLS started out really high before dropping significantly, then remaining roughly flat. This was odd, but it might have kept looking to find a minima
    - exited early, because I thought that I was fitting the wrong data lines. 
        - The lines were correct, so run 4 will be the same as this run

run 4:
    - fitting the same as run 3, but allowing it to run
===========================================
September 27, 2021

Resuming work on Monday 9/27 after not working last Thursday & Friday from being sidetrack

Discussed w Tyler several goals this AM over slack. Those goals along with others deemed to be important are written below

Goals for today:
    - make sure tlist starts before the square wave
    - try out the powell method (instead of Nelder-Mead)
    -  try new starting points that Tyler sent me over slack
    - figure out if the plotting from run s88780 is affecting the goodness of fit in the optimization
    
Tasks:

1. Checking tlist ...
    - tlist was starting at 200ns, now I brought it down to start at 150ns, should probably do 100ns
        - decided to go w 100ns
        - changes are made in the most recent version of the file run
            - heat_equation_1d_combo5

    - now that I have edited it, I have to go run an optimization and see if this makes the optimizer fit well
        - storing it as the first optimization for today (run1)
        - now time to clear everything
        - okay, looks good. Now time for the optimization run
        - running the optimization

    To-do's for optimization
        - monitor as it runs
        - quit if it doesn't seem to be converging after a substantial period of time
        - write up run report in excel workbook

===============================================
September 28, 2021
===============================================
- starting off by saving all changes to the github...
- now restarting my computer because it is going slowdown
- to-do's for today:
    - redo yesterday's fits with the original timestep
    - finally build the infrastructure for sfepy

BUILDING SFEPY MODEL

CONTINUING WITH OPTIMIZATION RUNS 
- have to go in and see what how i did the timestep before editing it yesterday. I think looking at one of the earlier versions of the main .m file should sufficiently do it
    - looking at heat_equation_data_1D_combo4 
    - okay, I changed it back to where it was. 
    - run1 is going to be me doing the nelder-mead optimization now with the original tlist values
    - time to run it and do the other tasks
    - next run, I'll try changing the start time a little bit more


- have to add information to the excel workbook and add to the readme.md file info from/about the last run
    - wait til I start the new optimization

NOTE - The optimizer is capable of analyzing/evaluating the function several times per iteration. Not sure how this works, but in run3 from yesterday, the optimizaer converged and showed that there were ~300-something iterations, and 500-something function evaluations

==========================================
September 29, 2021
==========================================
- starting  today with the same run that I cut off early yesterday during the meeting with Tyler
- I'm going to quit this optimization run in order to try to fix the problem with the start_time. I think I have to comment out the second line.
- maybe the next thing to try is to try plotting the data from before where it is at the flat background curve

========================================
October 1, 2021
===============================================
finishing trying out the dfifferent ptimization techniques from yesterday. Today the goal is to get something built and running in SfePy

=====================================
October 4, 2021
=====================================
Have spent a substantial amount of time this AM ocumenting my last run from friday as well as initiatin a new run, and trying to get fenics to work. Now I will spend the rest of the day trying to get sfepy to work with this data in some way

looking at the getfem python package
- nice (and unexpected) progress today

=============================================
October 5, 2021
=============================================
- Fridays @ 1PM UQ + warm dense matters
- craedl.jhu
- starting today with the runs from yesterday, and building out from there... 
- Have to do another run like the second run from yesterday, but where I am only trying to optimize the best-looking curves
- Okay I've done the new run for today, and we appear to be getting the same issue, we've been getting this whole time - start_time is minimized, k is larger than predicted, and the peak_temp is lowered further than it should be
    - let's try again, this time using the exact initial parameters from Tyler that I started using at some point last week
    - params0=[36000.0,0.017,30,2.0*10**-8]

- Okay, it's time to hypothesize from here how to proceed with the rest of the runs
    - earlier today, in meeting with Zach, he gave us the very useful idea of optimizing each run independently, then plotting the results of the parameters in k-space on a scatter plot (perhaps k-space with a 3rd axis? I think just k-space would suffice)


- most recent optimization was having the same problem as the first one that I did today
==============================================
- NOTE: I fixed a problem with the optimization code today: the simple four run was using the sls function for the three datasets (instead of 4), and so it was only optimizing the first three at once
==============================================
- now I have to select an approach from here
    - I will go ahead with trying to optimize one run at a time, then scattering their different values in k-space
    - next to try: all of the 4 data runs, do an optimization where the lowest possible temperature @ 4000K (edit this in the boundary condition file)
    - try the tlist starting @ 12 or 13
    - 

=================================================
October 6, 2021
=================================================
- I spent most of the morning working on getting my travel approved. Now it's time to work on getting the other shots optimized from yesterday. I have to do 80 & 83
- I also have to write up the ReadMe.md file

- Finished the day with wrapping up the four runs independently
- still have to redo the fourth run 

=================================================
October 7, 2021
==================================================
- time to go redo the 4th run now, while censoring the data from the final face
- successfully prepared and presented a summary of our work at group meeting with tyler
- tyler got his talk approved for this project at AGU conference in December
- talked with Deepak about going to the Texas experiment, and we discussed that I would likely have to stay in separate housing, since I am not vaccinated against COVID
- other than that, it seems like it is going pretty well and that I will be welcome at the experiemnet as is
- finished syncing the github repo on the lab computer with the status of the github repo on the online version
- now I have to go in nd make sure that the run is saved

==================================================
October 11, 2021
==================================================
- Goals for today:
    - chop data for the last run
    - fit chopped data
    - stremline optimization according to my goals

Streamlining goals:
    - fit into single function where the user sends:
        1. initial parameters
        2. the number of the run

    - what this function performs:
        1. write data into an excel file once run is complete
        2. saves excel folder in the runs for the day
        3. print and save beginning plots for the run in the day's optimization folder
        4. save final plots for each of the parameters
        5. add the initial plots, the final plots, and the parameter plots to the ReadMe.md file
        
Time to break with some pullups and dips. Have to save these notes to the repo

Okay, now working for the day... 
Have to chop and fit data
    - going into the Matlab file, I have to see how to chop the data as I have chopped the other runs previously
    - Have to look at the plots for a reasonable time for the data cutoffs to happens
        - looking in the excel file...
        - okay I've got the times to chop (or indices, rather)
        - I've edited the matlab file for the indices & plotting... now running the file to see if it works
        - okay, it looks good to go
        
        - Next step: Edit the least squares function in RUN_1D_FEM_v3 so that it reads from all the variables as intended
            - I think it should be good, now time to test it...

        - Testing...

It works, and I saved the results as run1. I also forgot that it was Columbus day/indigenous peoples' day, so I went home after saving the results from this run

=====================================================
October 12, 2021
=======================================================
-----

Beginning/Misc. Notes:
    - starting today by sending my results from yesterday
    - then I need to look over yesterday's notes to figure out where to pick it up from here

-----

Tasks:

TASK 1
- looking through yesterday's notes
- 

-----

To-do's:
    1. look through yesterday's notes and figure out what to do for today
    2. update Tyler on the fits from the other day
    3. 